package types

import (
	"homework/probability/utils"

	"fyne.io/fyne/v2"
)

var ThemeIcons = map[string]fyne.Resource {
	"Множества": utils.ThemeIconsMustLoad("asserts/icons/icons8-lock-100.png"),
	"Элементы теории высказываний": utils.ThemeIconsMustLoad("asserts/icons/icons8-epistemology-64.png"),
	"Комбинаторика": utils.ThemeIconsMustLoad("asserts/icons/icons8-color-filter-96.png"),
	"Теория графов": utils.ThemeIconsMustLoad("asserts/icons/icons8-graphs-64.png"),
	"Изоморфизм графов": utils.ThemeIconsMustLoad("asserts/icons/icons8-graphs-64.png"),
	"Планарные графы": utils.ThemeIconsMustLoad("asserts/icons/icons8-graphs-64.png"),
	"Деревья": utils.ThemeIconsMustLoad("asserts/icons/icons8-tree-64.png"),
	"Алгоритм Дейкстры": utils.ThemeIconsMustLoad("asserts/icons/icons8-algorithm-100.png"),
}

var Themes = []string{
	"Множества",
	"Элементы теории высказываний",
	"Комбинаторика",
	"Теория графов",
	"Изоморфизм графов",
	"Планарные графы",
	"Деревья",
	"Алгоритм Дейкстры",
}

type ProbabilityData struct {
	Title              string
	Theory             string
	FormulaPath        string
	FormulaDescription string
	ExampleText        string
	ExampleImage       string
	Hint               string
	SolutionText       string
}

type MainService interface {
	Calculate(n, m int) (float64, error)
}

func ThemeSwitcher(theme string) ProbabilityData {
	switch theme {
	case "Множества":
		return ProbabilityData{
			Title:              "Множества",
			Theory:             "Множество — это набор разных (уникальных) объектов, объединённых по какому-то признаку.",
			//ExampleImage:
			ExampleText: "В классе 30 учеников. Из них:\n"+
			"18 занимаются математикой,\n"+
			"12 — программированием,\n"+
			"5 — и математикой, и программированием.\n"+
			"Вопрос: Сколько учеников не занимаются ни математикой, ни программированием?",
			Hint: "1.Воспользуйтесь формулой включений-исключений для двух множеств(чтобы найти тех, что занимаются хотя бы 1-им предметом) :\n"+
			"|A ∪ B| = | A | + | B | - |A ∩ B|\n" + 
			"2.Найдите число тех, которые ничем не занимаются.",
			SolutionText:       "В пересечении — 5 человек.\n"+
			"Только математика: 18−5=13.\n"+
			"Только программирование: 12−5=7.\n"+
			"Ничего:  30−(13+5+7)=5.", 
		}

	case "Элементы теории высказываний":
		return ProbabilityData{
			Title:              "Элементы теории высказываний",
			Theory:             "Высказывание — это утверждение, которое может быть либо истинным, либо ложным.",
			FormulaDescription: "Основные логические операции:",
			ExampleImage:       "asserts/images/элементы_теории_выск.png",
			ExampleText: "Найти все наборы значений A, B, C ∈ {0, 1}, при которых логическое выражение (A ∨ B) → (¬C ∧ A) принимает значение 1 (истина).",
			Hint: "Порядок выполнения операций:\n"+
			"1. Скобки,\n"+
			"2. Отрицание (¬),\n"+ 
			"3. Конъюнкция (∧),\n"+
			"4. Дизъюнкция (∨),\n"+
			"5. Импликация (→)",
			SolutionText: "Решение примера:\n" +
				"1. Перебираем все возможные комбинации A, B, C ∈ {0,1}.\n" +
				"2. Рассматриваем выражение (A ∨ B) → (¬C ∧ A).\n" +
				"3. Получаем следующие результаты:\n" +
				"- A = 1, B = 0, C = 0: 1 → (1 ∧ 1) = 1\n" +
				"- A = 0, B = 0, C = 1: 0 → (1 ∧ 0) = 1\n" +
				"- A = 1, B = 1, C = 1: 1 → (0 ∧ 1) = 0 (ложь)\n" +
				"Итог: выбираем все комбинации, где выражение истинно.",
		}

	case "Комбинаторика":
		return ProbabilityData{
			Title:              "Комбинаторика",
			Theory:             "Комбинаторика — это это раздел математики, в котором рассматриваются задачи, связанные с подсчетом количества комбинаций при определенных условиях.",
			//ExampleImage:
			ExampleText: "1. Правила суммы и произведения.\n"+
			"Задача:\n"+
			"В кафе есть 3 вида пирожных и 5 видов напитков. Сколько вариантов заказа из одного пирожного и одного напитка?\n"+
			"\n"+
			"2. Перестановки (без повторений)\n"+
			"Задача:\n"+
			"Сколько способов расставить 4 книги на полке?\n"+
			"\n"+
			"3. Перестановки с повторениями\n"+
			"Задача:\n"+
			"Сколько различных слов можно составить из букв слова МАТЕМАТИКА?\n"+
			"\n"+
			"4. Размещения (без повторений)\n"+
			"Задача:\n"+
			"В конкурсе 10 участников. Сколькими способами можно распределить 1-е, 2-е и 3-е места?\n"+
			"\n"+
			"5. Размещения с повторениями\n"+
			"Задача:\n"+
			"Сколько 4-значных кодов можно составить из цифр 0-9, если цифры могут повторяться?\n"+
			"\n"+
			"6. Сочетания (без повторений)\n"+
			"Задача:\n"+
			"Сколькими способами можно выбрать 3 дежурных из 10 человек?\n"+
			"\n"+
			"7. Сочетания с повторениями\n"+
			"Задача:\n"+
			"В магазине есть 5 видов печенья. Сколько способов купить 3 печенья, если можно брать несколько одинаковых?\n"+
			"\n"+
			"8. Бином Ньютона\n"+
			"Задача:\n"+
			"Раскройте скобки: (x+2)^4"+
			"\n"+
			"9. Треугольник Паскаля\n"+
			"Задача:\n"+
			"Найдите коэффициент при x^2 в разложении (1+x)^5",
			Hint:"9.Треугольник Паскаля:\n"+
			"Коэффициенты берутся из 5-й строки треугольника Паскаля: 1, 5, 10, 10, 5, 1.",
			SolutionText:"1. Правила суммы и произведения.\n"+
			"3 × 5=15 вариантов.\n"+
			"\n"+
			"2. Перестановки (без повторений)\n"+
			"4!=24 способа.\n"+
			"\n"+
			"3. Перестановки с повторениями\n"+
			" 10!/(2! × 3! × 2!) = 151200.\n"+
			"\n"+
			"4. Размещения (без повторений)\n"+
			"10 × 9 × 8 = 720.\n"+
			"\n"+
			"5. Размещения с повторениями\n"+
			"10^4 = 10000 кодов.\n"+
			"\n"+
			"6. Сочетания (без повторений)\n"+
			"10!/(3! × (10 - 3)!) = 120.\n"+
			"\n"+
			"7. Сочетания с повторениями\n"+
			"Ответ: 35\n"+
			"\n"+
			"8. Бином Ньютона\n"+
			"(x^4) + (8x^3) + (24x^2) + 32x+16\n"+
			"\n"+
			"9. Треугольник Паскаля\n"+
			"Коэффициент 10.\n",	
		}

	case "Теория графов":
		return ProbabilityData{
			Title:              "Теория графов",
			Theory:             "Граф - совокупность точек(вершин), некоторые из которых, а может быть и все, могут быть соединены линиями(ребрами).",
			
		}

	case "Изоморфизм графов":
		return ProbabilityData{
			Title:  "Изоморфизм графов",
			Theory:  "Изоморфизм - переименование вершин и ребер графа G1, которое сохранияет отношение инцидентности\n"+
			"Инцидентность — это отношение между вершиной и ребром, при котором:\n"+
			"Вершина называется инцидентной ребру, если она является одним из его концов.\n"+
			"Ребро называется инцидентным вершине, если оно соединяет эту вершину с другой.",
		}

	case "Планарные графы":
		return ProbabilityData{
			Title:  "Планарные графы",
			Theory: "Планарный граф — это такой граф, который можно нарисовать на плоскости без пересечений рёбер.",
		}

	case "Деревья":
		return ProbabilityData{
			Title:        "Деревья",
			Theory:       "Граф G называется ациклическим или лесом, если в нем нет циклов. Ациклический связный граф называется деревом.",
			ExampleImage: "asserts/images/деревья-схема 1.png", 
			ExampleText:  "Данный граф состоит из трех компонентов связанности, каждая из которых является деревом. Множество вершин образуют компоненту связанности графа, если для любых его вершин существует путь связываний их и никакая другая вершина не связана путем ни с какой вершиной этого множества.",
		}

	case "Алгоритм Дейкстры":
		return ProbabilityData{
			Title:  "Алгоритм Дейкстры",
			Theory: "Алгоритм Дейкстры используется для нахождения кратчайшего пути от одной вершины до всех остальных в взвешенном графе с неотрицательными весами.",
		}
		
	default:
		return ProbabilityData{
			Title:  "Ничего не найдено",
			Theory: "Теория для этой темы пока не добавлена.",
		}
	}
}
